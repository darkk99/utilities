#!/usr/bin/ruby
require 'colorize'

operation = ARGV[0].to_s[0, 1] # get first letter of operation, i.e. if command is `ups upgrade`, then `command` is 'u'


def runCommand(tcmd)
  args = ARGV.drop(1).join(" ")
  cmd = tcmd.to_s
  cmd = cmd + ' ' + args unless args.is_empty?
  puts 'Running '.bold + "\`#{cmd}\`".red

  if !system("#{cmd}")
    abort "Error occurred while running \`#{cmd}\`".red.bold
  end
end

if operation == 'q' || operation == 'l' # query || list
  runCommand('list --installed')
elsif operation == 's' # search
  runCommand('apt search')
elsif operation == 'i' # info
  runCommand('apt info')
elsif operation == 'a' # add
  runCommand('install --reinstall')
elsif operation == 'r' # remove
  runCommand('sudo apt remove')
elsif operation == 'u' # update/upgrade
  runCommand('sudo apt update')
  runCommand('sudo apt upgrade')
  runCommand('sudo apt dist-upgrade')
elsif operation == 'e' # edit
  runCommand('sudo apt edit-sources')
elsif operation == 'd' # dep
  runCommand('sudo apt satisfy')
elsif operation == 'n' # autoremove
  runCommand('sudo apt autoremove')
else # help
  puts <<~HEREDOC
  ups is a CLI wrapper for apt that allows you to shorten down your commands
  for all commands listed, you can add additional character after the subcommand. for example, both \`ups u\` and \`ups ujahsd\` will work
  use `ups` in in the format:
  ups [command] packages
  commands:
    l OR q   - list/query packages based on package names
    s        - search in package descriptions
    i        - show package info
    a        - add/install packages
    r        - remove packages
    u        - update, upgrade, dist-upgrade, and autoremove
    e        - edit the source information file
    d        - satisfy dependency strings
    n        - remove needless dependencies
  HEREDOC
end
